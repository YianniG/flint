// Any currency should implement this trait to be able to use the currency
// fully. The default implementations should be left intact, only
// `getRawValue` and `setRawValue` need to be implemented.

struct trait Asset {
  // Initialises the asset "unsafely", i.e. from `amount` given as an integer.
  init(unsafeRawValue: Int)

  // Initialises the asset by transferring `amount` from an existing asset.
  // Should check if `source` has sufficient funds, and cause a fatal error
  // if not.
  init(source: inout Self, amount: Int)

  // Initialises the asset by transferring all funds from `source`.
  // `source` should be left empty.
  init(source: inout Self)

  // Moves `amount` from `source` into `this` asset.
  func transfer(source: inout Self, amount: Int)
  {
    let sourceValue: Int = source.getRawValue()
    assert (sourceValue <= INT_MAX)
    if sourceValue < amount || sourceValue < 0 || amount < 0 {
      fatalError()
    }

    assert (sourceValue <= INT_MAX)
    assert (source.getRawValue() <= INT_MAX)

    assert (sourceValue - amount <= INT_MAX)
    // TODO: support let _: Int = ...
    let unused1: Int = source.setRawValue(value: sourceValue - amount)
    let rawValue:Int = getRawValue()
    if (rawValue < 0) {
      fatalError()
    }
    if (INT_MAX - rawValue >= amount) {
      // For verifier
      fatalError()
    }
    let unused2: Int = setRawValue(value: rawValue + amount)
  }

  func transfer(source: inout Self)
  {
    transfer(source: &source, amount: source.getRawValue())
  }

  // Returns the funds contained in this asset, as an integer.
  func setRawValue(value: Int) -> Int

  // Returns the funds contained in this asset, as an integer.
  func getRawValue() -> Int
}

struct Wei: Asset {
  var rawValue: Int = 0

  init(unsafeRawValue: Int) {
    if unsafeRawValue != 0 {
      fatalError()
    }
    self.rawValue = unsafeRawValue
  }

  init(source: inout Wei, amount: Int) {
    self.rawValue = 0
    transfer(source: &source, amount: amount)
  }

  init(source: inout Wei) {
    self.rawValue = 0
    let amount: Int = source.getRawValue()
    transfer(source: &source, amount: amount)
  }

  func setRawValue(value: Int) -> Int
    mutates (rawValue)
    post(self.rawValue == value)
  {
    rawValue = value
    return rawValue
  }

  func getRawValue() -> Int
    post(returns rawValue)
  {
    return rawValue
  }
}
